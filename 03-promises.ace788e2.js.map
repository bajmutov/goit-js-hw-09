{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAkCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAzCMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALb,MAAOiB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAK3B,GAHAC,QAAQC,IAAIJ,EAAMK,MAAOJ,EAAKI,MAAOH,EAAOG,OAGxCL,EAAMK,MAAQ,GAAKH,EAAOG,OAAS,GAAKJ,EAAKI,MAAQ,EAE7C,YADPzB,EAAA0B,OAAOC,QAAS,gCAIrB,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAOG,MAAOG,GAAK,EACtC1B,EAAc0B,EAAGR,EAAMK,OACpBI,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACjBJ,EAAA0B,OAAOK,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,OAC3DmB,QAAMC,IAAI,uBAAwCQ,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAE3D6B,OAAM,SAAAH,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClBJ,EAAA0B,OAAOC,QAAQ,sBAAqCK,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAE9DgB,EAAMK,MAAQS,OAAOd,EAAMK,OAASS,OAAOb,EAAKI,OAGlDV,EAAMG,cAAciB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  console.log(delay.value, step.value, amount.value);\n\n  \n  if (delay.value < 0 || amount.value <= 0 || step.value < 0) {\n       Notify.failure(`❌❌ Incorrect input values.❌❌`);\n      return;\n  }\n  \n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, delay.value)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay.value = Number(delay.value) + Number(step.value);\n  }\n  \n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","console","log","value","Notify","failure","i","then","param","success","concat","catch","Number","reset"],"version":3,"file":"03-promises.ace788e2.js.map"}